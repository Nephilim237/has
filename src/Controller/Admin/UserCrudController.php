<?php

namespace App\Controller\Admin;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\DomCrawler\Field\FormField;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Vich\UploaderBundle\Form\Type\VichImageType;

class UserCrudController extends AbstractCrudController
{
    public const UPLOAD_POST_BASE_PATH = 'images/upload/member';
    public const UPLOAD_POST_ROOT_PATH = 'public/images/upload/member';

    private UserPasswordHasherInterface $hashed;
    public function __construct(UserPasswordHasherInterface $hashed)
    {
        $this->hashed = $hashed;
    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return parent::configureCrud($crud)
            ->setPageTitle('index', 'Membres de l\'association')
            ->setPageTitle('new', 'Nouveau membre')
            ->setSearchFields(['name', 'firstname', 'title', 'country', 'speciality', 'email'])
            ->setDateFormat('medium')
            ->setTimeFormat('medium')
            ;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')->hideOnForm(),
            TextField::new('firstname', 'Prénom')->setColumns('col-sm-12 col-md-3'),
            TextField::new('name', 'Nom')->setColumns('col-sm-12 col-md-3'),
            EmailField::new('email', 'Email')->setColumns('col-sm-12 col-md-3'),

            TextField::new('title', 'Titre')->onlyOnForms()->setColumns('col-sm-12 col-md-3'),
            TextField::new('speciality', 'Spécialité')->onlyOnForms()->setColumns('col-sm-12 col-md-3'),
            TextField::new('memberFunction', 'Poste au sein de l\'organisation')->onlyOnForms()->setColumns('col-sm-12 col-md-3'),
            ChoiceField::new('roles', 'Role')->allowMultipleChoices()->setChoices([
                'Membre' => 'ROLE_USER',
                'Modérateur' => 'ROLE_MODO',
                'Administrateur' => 'ROLE_ADMIN'
            ])->onlyOnForms()->setColumns('col-sm-12 col-md-3'),
            TextField::new('imageFile', 'Illustration')
                ->hideOnIndex()
                ->setFormType(VichImageType::class)->setColumns('col-sm-12 col-md-3'),
            ImageField::new('profileImage', 'Photo de Profil')
                ->hideOnForm()
                ->setBasePath(self::UPLOAD_POST_BASE_PATH)
                ->setUploadDir(self::UPLOAD_POST_ROOT_PATH)
                ->setSortable(false),
        ];
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof User) return;
        $password = $this->hashed->hashPassword($entityInstance, "1234567890");
        $entityInstance
            ->setPassword($password)
            ->setUpdateAt(new \DateTimeImmutable())
            ->setCreatedAt(new \DateTimeImmutable())
        ;
        parent::persistEntity($entityManager, $entityInstance);
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof User) return;
        $entityInstance
        ->setUpdateAt(new \DateTimeImmutable())
    ;
        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }
}
